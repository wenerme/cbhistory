
实现分析和统计数据,需要依赖 spring data/persistence jpa/analysis

值得注意的是,这些数据都需要缓存,一小时或者是一天更新一次

* 一天中那些时候最活跃
	most_active_time
	* 以 小时 分组
* 一周中那些时候最活跃
	most_active_day
	* 以 day of week 分组
* 哪些地区最活跃
	most_active_area
	* 地区评论总和
* 历史最活跃的几天
	most_active_in_history
* 平均每天评论数量
	avarage_comment_pre_day
* 平均每天每个地方的评论数量
	avarage_comment_pre_day_pre_area
* 最活跃的文章源
	* 周|月|总
	most_active_source
	* 以 source 分组

* 最受欢迎的评论
	most_popular_comment
	* 日/周/月
* 最不受欢迎的评论
	worst_popular_comment
	* 日/周/月
	
* 格式: 最近 [周|月] 最 xxxx
	* 考虑实现这样统一的接口

数据统计导出方案
--------------

* 每个月导出一次
* 导出到指定目录
* 导出主要是导出每天的, 其他的时间单位可以用这个来推出
* 关于小时这样的单位, 可以暂时不考虑


接口策略
----------
1. stat/most/comment|article|source/[week|month|day]
	不方便实现
2. stat/most_active_area/[day|week|month]:period
	实现起来简单

* 可插入式的分析内容
* 数据格式 ?
	大多数的数据格式都不相同,尽量减少数据格式之间的差距

包结构
------	
analysis
	term
		@TermInfo(base="")
		IAnalysisTerm
			@Term(name = "", description = "",expired=123)
			public String getMostPopComment(QueryInfo)
			
	AnalysisServer
		getAnalysis(QueryInfo)

分词器

https://code.google.com/p/ik-analyzer/
https://code.google.com/p/paoding/

ik 最后更新 2012
paoding 最后更新 2008

收集百度热词页
-----------
$.makeArray($('.keyword .list-title').map(function(){return $(this).text()})).join('\n')+'\n'


数据可视化方案
==============
主要是 d3js 和 google visualization, 选择 d3js 更好, 因为google 在国内大多访问不了
除此之外 这些也是值得考虑的
https://github.com/trifacta/vega

但是选择 d3js 我又比较懒, 选一些基于 d3js 实现的库

2675 star
http://nvd3.org/

616 star
http://dimplejs.org/

1043 star
http://c3js.org/

那就先尝试 nvd3 咯~ :-)

大概熟悉需要什么样的数据格式后, 在做数据导出

由于数据量特别大, 很多是只能选择前 10 来进行统计

统计分类: 总, 月, 周?
这样的时间分类也确定了需要更新数据的频度, 暂时选择月

文章源前十


一些统计 SQL
============
select count(*), date(date) as pub_date
from cbhistory_article 
where source = "安兔兔" 
group by pub_date;

select count(*) date(date) as pub_date from table group by pub-date;





如何呈现数据
===========

有两种策略
1. 将大多数数据完全导出, 然后到前端的时候再由前端处理
	* 相对来说灵活性更高
	* 导出方便
	* 前端处理相对比较麻烦
	* 由于可能一次性的数据量比较大, 会导致一些网络流量和运算速度的问题
	* 数据提供方式
		- 提供一个  DataRepo 类作为数据仓库
		- 从数据仓库获取数据的时候对数据进行预处理
2. 导出为前端可以直接使用的数据
	* 要根据处理的数据不同来做导出的数据结构
	* 导出很多文件
	* 前端没压力
	* 如果多增加一个分类什么的, 就得在后端添加一个导出格式
	* 数据提供方式
		- 提供大量的数据文件
			- source-count-total, source-count-2014-5, source-count-2014-6
			- 此外还需要一些额外信息的文件 source-count-info
			- 提供不一样的查看方式 source-date-count 数据源以日期分组的总计
		- 以 数据类名+[日期后缀|total|info] 的形式来提供大量的数据
	
OK~ 好吧~ 这是一个艰难的抉择呢~ 第二个方法明显要死板但是简单的多呢~

e.g.
发布者统计
饼图
{
	[label: 发布者名, value: 数量]
}

统计每天发布的文章数量

一天中评论者活跃的时间
	文章发布者
一周中评论者活跃的时间
	文章发布者
	
以发布者统计
	统计前十
	每月的前十

以地区统计
按省统计, 因为有些地区是带有市的
	
area-count-
	total
	provence
	%yyyy-%dd

Exporter
	getCode()
	getName()
	doExport(startTime, endTime)
	Map<String, String> getCategories()
	export(String category, String description, Object date)
	getBasePath()
	Map<String, Object> getInfo()

谷歌地图
https://maps.google.co.uk/maps?q=LATITUDE_HERE,LONGITUDE_HERE&z=11